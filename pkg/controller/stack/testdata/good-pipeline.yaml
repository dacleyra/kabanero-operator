#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-deploy-pl-pullrequest-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.pull_request.head.sha)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.pull_request.head.sha)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-deploy-pl-push-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.head_commit.id)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.head_commit.id)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: event-ref
    value: $(body.ref)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: StackId-build-deploy-pl-template
  namespace: tekton-pipelines
spec:
  params:
  - name: event-ref
    default: other
  - name: gitrevision
    description: The revision of your Git repository
  - name: gitrepositoryurl
    description: The url of your Git repository
  - name: webhooks-tekton-git-server
    description: The server name in the Git url
  - name: webhooks-tekton-git-org
    description: The org name in the Git url
  - name: webhooks-tekton-git-repo
    description: The repository name in the Git url
  - name: webhooks-tekton-git-branch
    description: The branch for the Git repository
  - name: event-type
    description: The Git event type
  - name: webhooks-tekton-docker-registry
    description: The image registry
  - name: docker-tag
    description: The image tag
  - name: webhooks-tekton-service-account
    description: The ServiceAccount that the PipelineRun will execute under
  - name: webhooks-tekton-target-namespace
    description: The namespace in which to create this TriggerTemplate's resources
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: git-source-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: git
      params:
      - name: revision
        value: $(params.gitrevision)
      - name: url
        value: $(params.gitrepositoryurl)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: docker-image-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: image
      params:
      - name: url
        value: $(params.webhooks-tekton-docker-registry)/$(params.docker-tag)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      generateName: StackId-build-deploy-pl-run-
      namespace: $(params.webhooks-tekton-target-namespace)
      labels:
        webhooks.tekton.dev/gitServer: $(params.webhooks-tekton-git-server)
        webhooks.tekton.dev/gitOrg: $(params.webhooks-tekton-git-org)
        webhooks.tekton.dev/gitRepo: $(params.webhooks-tekton-git-repo)
        webhooks.tekton.dev/gitBranch: $(params.webhooks-tekton-git-branch)
    spec:
      serviceAccountName: $(params.webhooks-tekton-service-account)
      pipelineRef:
        name: StackId-build-deploy-pl
      params:
      - name: event-type
        value: $(params.event-type)
      - name: event-ref
        value: $(params.event-ref)
      resources:
      - name: git-source
        resourceRef:
          name: git-source-$(uid)
      - name: docker-image
        resourceRef: 
          name: docker-image-$(uid)


---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: StackId-build-deploy-pl
spec:
  params:
  - name: event-type
    type: string
    description: "The event type"
  - name: event-ref
    type: string
    description: "The event ref"
  resources:
  - name: git-source
    type: git
  - name: docker-image
    type: image
  tasks:
  - name: validate-stack-task
    taskRef:
      name: StackId-validate-stack-task
    resources:
      inputs:
      - name: git-source
        resource: git-source
  - name: build-push-task
    taskRef:
      name: StackId-build-push-task
    runAfter: [validate-stack-task]
    resources:
      inputs:
      - name: git-source
        resource: git-source
      outputs:
      - name: docker-image
        resource: docker-image
      - name: git-source
        resource: git-source
  - name: image-scan-task
    taskRef:
      name: StackId-image-scan-task
    runAfter: [build-push-task]
    resources:
      inputs:
      - name: git-source
        resource: git-source
      - name: docker-image
        resource: docker-image
  - name: deploy-task
    conditions:
    - conditionRef: StackId-deployment-condition
      params:
      - name: event-type
        value: $(params.event-type)
      - name: event-ref
        value: $(params.event-ref)
    taskRef:
      name: StackId-deploy-task
    runAfter: [image-scan-task]
    resources:
      inputs:
      - name: git-source
        resource: git-source
        from: [build-push-task]
      - name: docker-image
        resource: docker-image
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-build-deploy-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    params:
    - name: app-deploy-file-name
      default: app-deploy.yaml
    - name: stack-image-registry-url
      default: docker.io
  outputs:
    resources:
    - name: docker-image
      type: image
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #logic to make docker image image_name as lowercase
        #example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
        # Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF
        
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo \$(outputs.resources.docker-image.url) ) " > imageurl_imagename_lowercase.sh
        
        # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
        echo "firstHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh
        echo "secondHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh
        
        #Conditional check if ':' is present in 'secondHalfURL'. 
        #for ex - secondHalfURL=appsodympversion:abcDEF
        echo "if [[ \$secondHalfURL == *\":\"* ]]; then" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname" >> imageurl_imagename_lowercase.sh
        #conditional check for ex - secondHalfURL=appsodympversion:abcDEF
        echo "else" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$secondHalfURL" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase" >> imageurl_imagename_lowercase.sh
        echo "fi" >> imageurl_imagename_lowercase.sh 
        echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>  imageurl_imagename_lowercase.sh
         
        chmod 755 imageurl_imagename_lowercase.sh
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: build
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Configmap value for DEFAULT_STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL"

        if [ -z "$DEFAULT_STACK_IMAGE_REGISTRY_URL" ]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_URL not configured in a config map.  Look for the stack registry info in the .appsody-cfg file."
            APPSODY_CONFIG=".appsody-config.yaml"
            
            # Default the stack registry to docker.io
            STACK_IMAGE_REGISTRY_URL="docker.io"

            cd /workspace/$gitsource
            
            if [ ! -f "$APPSODY_CONFIG" ]; then
                echo "$APPSODY_CONFIG is not found in the root of the source directory."
            else
                # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
                declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
                if [ -z "$STACK" ]; then
                  echo "$APPSODY_CONFIG does not contain a stack definition."
                fi
            fi

            # The stack registry may or may not be in the appsody-cfg.yaml file
            # If it's there the format should be like registry/project/name:version
            # It could also just be project/name:version.
            # Try to determine if the registry is there and if it is, parse it out
            NUM_SLASHES=$(awk -F"/" '{print NF-1}' <<< "${STACK}")
            if [ "$NUM_SLASHES" = 1 ]; then
                echo "No stack registry specified in $APPSODY_CONFIG. Using docker.io as the stack registry."
            elif [ "$NUM_SLASHES" = 2 ]; then
                STACK_IMAGE_REGISTRY_URL="$(echo $STACK | cut -d'/' -f1)"
                echo "Stack registry specified in $APPSODY_CONFIG as $STACK_IMAGE_REGISTRY_URL.  Using this as the stack registry."
            else
                echo "Unexpeted format for stack in APPSODY_CONFIG. Using docker.io as the stack registry"
            fi
        else
            echo "Using stack image registry url setup by user in configmap as $DEFAULT_STACK_IMAGE_REGISTRY_URL"
            STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        fi
        
        echo "Looking for stack registry at $STACK_IMAGE_REGISTRY_URL."

        if [[ ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME" ) || ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD" ) ]]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME or DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD is empty.  Assumption is authentication to the registry is not required."
        else
            echo "Secrets are provided to login to stack registry"
            
            #Creating a cert for authentication of buildah login of the DEFAULT_STACK_IMAGE_REGISTRY_URL registry url
            echo "HOST=$STACK_IMAGE_REGISTRY_URL" > cert-creation.sh
            echo "sudo mkdir -p /etc/docker/certs.d/\${HOST}" >> cert-creation.sh
            echo "openssl s_client -connect \${HOST} -servername \${HOST} 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/docker/certs.d/\${HOST}/ca.crt" >> cert-creation.sh
            echo "buildah login -u $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME -p $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD \${HOST}" >> cert-creation.sh
            
            echo "Creating certificates and logging into the registry."
            chmod 755 cert-creation.sh
            ./cert-creation.sh
        fi

        cd /workspace/$gitsource
 
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$STACK_IMAGE_REGISTRY_URL"
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  - name: push
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        buildah push --tls-verify=false "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: deploy-image
    image: kabanero/kabanero-utils:0.3.0
    command: ['/bin/sh']
    args: ['-c', 'find /workspace/$gitsource -name ${YAMLFILE} -type f|xargs kubectl apply -f']
    env:
    - name: gitsource
      value: git-source
    - name: YAMLFILE
      value: $(inputs.params.app-deploy-file-name)
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-pl-pullrequest-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.pull_request.head.sha)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.pull_request.head.sha)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-pl-push-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.head_commit.id)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.head_commit.id)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: StackId-build-pl-template
  namespace: tekton-pipelines
spec:
  params:
  - name: event-ref
    default: other
  - name: gitrevision
    description: The revision of your Git repository
  - name: gitrepositoryurl
    description: The url of your Git repository
  - name: webhooks-tekton-git-server
    description: The server name in the Git url
  - name: webhooks-tekton-git-org
    description: The org name in the Git url
  - name: webhooks-tekton-git-repo
    description: The repository name in the Git url
  - name: webhooks-tekton-git-branch
    description: The branch for the Git repository
  - name: event-type
    description: The Git event type
  - name: webhooks-tekton-docker-registry
    description: The image registry
  - name: docker-tag
    description: The image tag
  - name: webhooks-tekton-service-account
    description: The ServiceAccount that the PipelineRun will execute under
  - name: webhooks-tekton-target-namespace
    description: The namespace in which to create this TriggerTemplate's resources
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: git-source-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: git
      params:
      - name: revision
        value: $(params.gitrevision)
      - name: url
        value: $(params.gitrepositoryurl)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: docker-image-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: image
      params:
      - name: url
        value: $(params.webhooks-tekton-docker-registry)/$(params.docker-tag)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      generateName: StackId-build-pl-run-
      namespace: $(params.webhooks-tekton-target-namespace)
      labels:
        webhooks.tekton.dev/gitServer: $(params.webhooks-tekton-git-server)
        webhooks.tekton.dev/gitOrg: $(params.webhooks-tekton-git-org)
        webhooks.tekton.dev/gitRepo: $(params.webhooks-tekton-git-repo)
        webhooks.tekton.dev/gitBranch: $(params.webhooks-tekton-git-branch)
    spec:
      serviceAccountName: $(params.webhooks-tekton-service-account)
      pipelineRef:
        name: StackId-build-pl
      params:
      - name: event-type
        value: $(params.event-type)
      resources:
      - name: git-source
        resourceRef:
          name: git-source-$(uid)
      - name: docker-image
        resourceRef:
          name: docker-image-$(uid)
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: StackId-build-pl
spec:
  resources:
    - name: git-source
      type: git
    - name: docker-image
      type: image
  tasks:
    - name: validate-stack-task
      taskRef:
        name: StackId-validate-stack-task
      resources:
        inputs:
        - name: git-source
          resource: git-source
    - name: build-task
      taskRef:
        name: StackId-build-task
      runAfter: [validate-stack-task]
      resources:
        inputs:
        - name: git-source
          resource: git-source
        outputs:
        - name: docker-image
          resource: docker-image
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-push-pl-pullrequest-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.pull_request.head.sha)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.pull_request.head.sha)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: StackId-build-push-pl-push-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: gitrevision
    value: $(body.head_commit.id)
  - name: gitrepositoryurl
    value: $(body.repository.clone_url)
  - name: docker-tag
    value: $(body.repository.name):$(body.head_commit.id)
  - name: event-type
    value: $(header.X-Github-Event)
  - name: webhooks-tekton-git-branch
    value: $(body.webhooks-tekton-git-branch)
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: StackId-build-push-pl-template
  namespace: tekton-pipelines
spec:
  params:
  - name: event-ref
    default: other
  - name: gitrevision
    description: The revision of your Git repository
  - name: gitrepositoryurl
    description: The url of your Git repository
  - name: webhooks-tekton-git-server
    description: The server name in the Git url
  - name: webhooks-tekton-git-org
    description: The org name in the Git url
  - name: webhooks-tekton-git-repo
    description: The repository name in the Git url
  - name: webhooks-tekton-git-branch
    description: The branch for the Git repository
  - name: event-type
    description: The Git event type
  - name: webhooks-tekton-docker-registry
    description: The image registry
  - name: docker-tag
    description: The image tag
  - name: webhooks-tekton-service-account
    description: The ServiceAccount that the PipelineRun will execute under
  - name: webhooks-tekton-target-namespace
    description: The namespace in which to create this TriggerTemplate's resources
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: git-source-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: git
      params:
      - name: revision
        value: $(params.gitrevision)
      - name: url
        value: $(params.gitrepositoryurl)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: docker-image-$(uid)
      namespace: $(params.webhooks-tekton-target-namespace)
    spec:
      type: image
      params:
      - name: url
        value: $(params.webhooks-tekton-docker-registry)/$(params.docker-tag)
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineRun
    metadata:
      generateName: StackId-build-push-pl-run-
      namespace: $(params.webhooks-tekton-target-namespace)
      labels:
        webhooks.tekton.dev/gitServer: $(params.webhooks-tekton-git-server)
        webhooks.tekton.dev/gitOrg: $(params.webhooks-tekton-git-org)
        webhooks.tekton.dev/gitRepo: $(params.webhooks-tekton-git-repo)
        webhooks.tekton.dev/gitBranch: $(params.webhooks-tekton-git-branch)
    spec:
      serviceAccountName: $(params.webhooks-tekton-service-account)
      pipelineRef:
        name: StackId-build-push-pl
      params:
      - name: event-type
        value: $(params.event-type)
      resources:
      - name: git-source
        resourceRef:
          name: git-source-$(uid)
      - name: docker-image
        resourceRef: 
          name: docker-image-$(uid)


---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: StackId-build-push-pl
spec:
  resources:
    - name: git-source
      type: git
    - name: docker-image
      type: image
  tasks:
    - name: validate-stack-task
      taskRef:
        name: StackId-validate-stack-task
      resources:
        inputs:
        - name: git-source
          resource: git-source
    - name: build-push-task
      taskRef:
        name: StackId-build-push-task
      runAfter: [validate-stack-task]
      resources:
        inputs:
        - name: git-source
          resource: git-source
        outputs:
        - name: docker-image
          resource: docker-image
        - name: git-source
          resource: git-source
    - name: image-scan-task
      taskRef:
        name: StackId-image-scan-task
      runAfter: [build-push-task]
      resources:
        inputs:
        - name: git-source
          resource: git-source
        - name: docker-image
          resource: docker-image
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-build-push-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
  outputs:
    resources:
    - name: docker-image
      type: image
    - name: git-source
      type: git
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #logic to make docker image image_name as lowercase
        #example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
        # Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF
        
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo \$(outputs.resources.docker-image.url) ) " > imageurl_imagename_lowercase.sh
        
        # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
        echo "firstHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh
        echo "secondHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh
        
        #Conditional check if ':' is present in 'secondHalfURL'. 
        #for ex - secondHalfURL=appsodympversion:abcDEF
        echo "if [[ \$secondHalfURL == *\":\"* ]]; then" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname" >> imageurl_imagename_lowercase.sh
        #conditional check for ex - secondHalfURL=appsodympversion:abcDEF
        echo "else" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$secondHalfURL" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase" >> imageurl_imagename_lowercase.sh
        echo "fi" >> imageurl_imagename_lowercase.sh 
        echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>  imageurl_imagename_lowercase.sh
 
        chmod 755 imageurl_imagename_lowercase.sh
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: build
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Configmap value for DEFAULT_STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL"

        if [ -z "$DEFAULT_STACK_IMAGE_REGISTRY_URL" ]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_URL not configured in a config map.  Look for the stack registry info in the .appsody-cfg file."
            APPSODY_CONFIG=".appsody-config.yaml"
            
            # Default the stack registry to docker.io
            STACK_IMAGE_REGISTRY_URL="docker.io"

            cd /workspace/$gitsource
            
            if [ ! -f "$APPSODY_CONFIG" ]; then
                echo "$APPSODY_CONFIG is not found in the root of the source directory."
            else
                # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
                declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
                if [ -z "$STACK" ]; then
                  echo "$APPSODY_CONFIG does not contain a stack definition."
                fi
            fi

            # The stack registry may or may not be in the appsody-cfg.yaml file
            # If it's there the format should be like registry/project/name:version
            # It could also just be project/name:version.
            # Try to determine if the registry is there and if it is, parse it out
            NUM_SLASHES=$(awk -F"/" '{print NF-1}' <<< "${STACK}")
            if [ "$NUM_SLASHES" = 1 ]; then
                echo "No stack registry specified in $APPSODY_CONFIG. Using docker.io as the stack registry."
            elif [ "$NUM_SLASHES" = 2 ]; then
                STACK_IMAGE_REGISTRY_URL="$(echo $STACK | cut -d'/' -f1)"
                echo "Stack registry specified in $APPSODY_CONFIG as $STACK_IMAGE_REGISTRY_URL.  Using this as the stack registry."
            else
                echo "Unexpeted format for stack in APPSODY_CONFIG. Using docker.io as the stack registry"
            fi
        else
            echo "Using stack image registry url setup by user in configmap as $DEFAULT_STACK_IMAGE_REGISTRY_URL"
            STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        fi
        
        echo "Looking for stack registry at $STACK_IMAGE_REGISTRY_URL."

        if [[ ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME" ) || ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD" ) ]]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME or DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD is empty.  Assumption is authentication to the registry is not required."
        else
            echo "Secrets are provided to login to stack registry"
            
            #Creating a cert for authentication of buildah login of the DEFAULT_STACK_IMAGE_REGISTRY_URL registry url
            echo "HOST=$STACK_IMAGE_REGISTRY_URL" > cert-creation.sh
            echo "sudo mkdir -p /etc/docker/certs.d/\${HOST}" >> cert-creation.sh
            echo "openssl s_client -connect \${HOST} -servername \${HOST} 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/docker/certs.d/\${HOST}/ca.crt" >> cert-creation.sh
            echo "buildah login -u $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME -p $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD \${HOST}" >> cert-creation.sh
            
            echo "Creating certificates and logging into the registry."
            chmod 755 cert-creation.sh
            ./cert-creation.sh
        fi

        cd /workspace/$gitsource
 
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$STACK_IMAGE_REGISTRY_URL"
        echo "Copying the generated app-deploy.yaml file from input to the output to pass the file to the next task when this task is used in deploy pipeline"
        cp app-deploy.yaml $(outputs.resources.git-source.path)
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  - name: push
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |

        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
  
        buildah push --tls-verify=false "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true

---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-build-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    params:
    - name: stack-image-registry-url
      default: docker.io
  outputs:
    resources:
    - name: docker-image
      type: image
  steps:
  - name: imagename-lowercase
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        #logic to make docker image image_name as lowercase
        #example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
        # Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF
        
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo \$(outputs.resources.docker-image.url) ) " > imageurl_imagename_lowercase.sh
        
        # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
        echo "firstHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh
        echo "secondHalfURL=\$(echo \$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh
        
        #Conditional check if ':' is present in 'secondHalfURL'. 
        #for ex - secondHalfURL=appsodympversion:abcDEF
        echo "if [[ \$secondHalfURL == *\":\"* ]]; then" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname" >> imageurl_imagename_lowercase.sh
        #conditional check for ex - secondHalfURL=appsodympversion:abcDEF
        echo "else" >> imageurl_imagename_lowercase.sh
        echo "  imagename=\$secondHalfURL" >> imageurl_imagename_lowercase.sh
        echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
        echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase" >> imageurl_imagename_lowercase.sh
        echo "fi" >> imageurl_imagename_lowercase.sh 
        echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>  imageurl_imagename_lowercase.sh
         
        chmod 755 imageurl_imagename_lowercase.sh
    env:
    - name: gitsource
      value: git-source
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - name: build
    securityContext:
      privileged: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        echo "Configmap value for DEFAULT_STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL"

        if [ -z "$DEFAULT_STACK_IMAGE_REGISTRY_URL" ]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_URL not configured in a config map.  Look for the stack registry info in the .appsody-cfg file."
            APPSODY_CONFIG=".appsody-config.yaml"
            
            # Default the stack registry to docker.io
            STACK_IMAGE_REGISTRY_URL="docker.io"

            cd /workspace/$gitsource
            
            if [ ! -f "$APPSODY_CONFIG" ]; then
                echo "$APPSODY_CONFIG is not found in the root of the source directory."
            else
                # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
                declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
                if [ -z "$STACK" ]; then
                  echo "$APPSODY_CONFIG does not contain a stack definition."
                fi
            fi

            # The stack registry may or may not be in the appsody-cfg.yaml file
            # If it's there the format should be like registry/project/name:version
            # It could also just be project/name:version.
            # Try to determine if the registry is there and if it is, parse it out
            NUM_SLASHES=$(awk -F"/" '{print NF-1}' <<< "${STACK}")
            if [ "$NUM_SLASHES" = 1 ]; then
                echo "No stack registry specified in $APPSODY_CONFIG. Using docker.io as the stack registry."
            elif [ "$NUM_SLASHES" = 2 ]; then
                STACK_IMAGE_REGISTRY_URL="$(echo $STACK | cut -d'/' -f1)"
                echo "Stack registry specified in $APPSODY_CONFIG as $STACK_IMAGE_REGISTRY_URL.  Using this as the stack registry."
            else
                echo "Unexpeted format for stack in APPSODY_CONFIG. Using docker.io as the stack registry"
            fi
        else
            echo "Using stack image registry url setup by user in configmap as $DEFAULT_STACK_IMAGE_REGISTRY_URL"
            STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        fi
        
        echo "Looking for stack registry at $STACK_IMAGE_REGISTRY_URL."

        if [[ ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME" ) || ( -z "$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD" ) ]]
        then
            echo "DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME or DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD is empty.  Assumption is authentication to the registry is not required."
        else
            echo "Secrets are provided to login to stack registry"
            
            #Creating a cert for authentication of buildah login of the DEFAULT_STACK_IMAGE_REGISTRY_URL registry url
            echo "HOST=$STACK_IMAGE_REGISTRY_URL" > cert-creation.sh
            echo "sudo mkdir -p /etc/docker/certs.d/\${HOST}" >> cert-creation.sh
            echo "openssl s_client -connect \${HOST} -servername \${HOST} 2>/dev/null </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/docker/certs.d/\${HOST}/ca.crt" >> cert-creation.sh
            echo "buildah login -u $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME -p $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD \${HOST}" >> cert-creation.sh
            
            echo "Creating certificates and logging into the registry."
            chmod 755 cert-creation.sh
            ./cert-creation.sh
        fi

        cd /workspace/$gitsource
 
        OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
        echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

        appsody build -t "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" --buildah --buildah-options "--format=docker" --stack-registry "$STACK_IMAGE_REGISTRY_URL"
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: StackId-deployment-condition
spec:
  params:
  - name: "event-type"
    type: string
    description: "The Git event type"
  - name: "event-ref"
    type: string
    description: "The Git event ref"
  check:
    name: deployment-condition
    image: alpine
    command: ["/bin/sh"]
    args:
      - -ce
      - |
        echo $(params.event-type)
        echo $(params.event-ref)
        [[ $(params.event-type) == "push" && $(params.event-ref) == "refs/heads/master" ]]
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-deploy-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
    - name: docker-image
      type: image
    params:
    - name: repository-name
      default: StackId
    - name: app-deploy-file-name
      default: app-deploy.yaml
  steps:
  - name: deploy-image
    image: kabanero/kabanero-utils:0.3.0
    command: ['/bin/sh']
    args: ['-c', 'find /workspace/$gitsource -name ${YAMLFILE} -type f|xargs kubectl apply -f']
    env:
    - name: gitsource
      value: git-source
    - name: YAMLFILE
      value: $(inputs.params.app-deploy-file-name)
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: StackId-image-retag-pl
spec:
  resources:
    - name: docker-src-image
      type: image
    - name: docker-dest-image
      type: image
  tasks:
    - name: image-retag-task
      taskRef:
        name: StackId-image-retag-task
      resources:
        inputs:
        - name: docker-src-image
          resource: docker-src-image
        - name: docker-dest-image
          resource: docker-dest-image
        outputs:
        - name: docker-dest-image
          resource: docker-dest-image
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-image-retag-task
spec:
  inputs:
    resources:
      - name: docker-src-image
        type: image
      - name: docker-dest-image
        type: image
    params:
      - name: pathToDockerFile
        default: /workspace/extracted/Dockerfile
      - name: pathToContext
        default: /workspace/extracted
  outputs:
    resources:
      - name: docker-dest-image
        type: image
  steps:
    - name: buildah-pull
      securityContext:
        privileged: true
      image: appsody/appsody-buildah:0.5.8-buildah1.9.0
      command: ['buildah', 'pull', '--tls-verify=false', '$(inputs.resources.docker-src-image.url)']
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - name: buildah-tag
      securityContext:
        privileged: true
      image: appsody/appsody-buildah:0.5.8-buildah1.9.0
      command: ['buildah', 'tag', '$(inputs.resources.docker-src-image.url)', '$(inputs.resources.docker-dest-image.url)']
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
    - name: buildah-push
      securityContext:
        privileged: true
      image: appsody/appsody-buildah:0.5.8-buildah1.9.0
      command: ['buildah', 'push', '--tls-verify=false', '$(outputs.resources.docker-dest-image.url)', 'docker://$(outputs.resources.docker-dest-image.url)']
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
---
#Kabanero! on activate substitute StackId for text 'StackId'
# This task scans the docker image using the specified command and arguments.
# It requires an image that contains the scanner to be used to scan the docker-image image input.
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-image-scan-task
spec:
  inputs:
    resources:
      - name: git-source
        type: git
      - name: docker-image
        type: image
    params:
      - name: command
        description: The scanner command
        default: oscap-chroot
      - name: module
        description: Specifies the type of SCAP content to use. For example, oval or xccdf.
        default: oval
      - name: options-and-arguments
        description: Specifies the module operation options and arguments
        default: ""
      - name: scansDir
        description: The relative directory to save the scan outputs to
        default: kabanero/scans
      - name: pathToInputFile
        description: The scanner's XCCDF or OVAL file 
        default: /usr/local/share/openscap/cpe/openscap-cpe-oval.xml
  steps:
    - name: imagename-lowercase
      securityContext:
        privileged: true
      image: appsody/appsody-buildah:0.5.8-buildah1.9.0
      command: ["/bin/bash"]
      args:
        - -c
        - |
          #logic to make docker image image_name as lowercase
          #example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF
          # Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF
        
          echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL=\$( echo \$(inputs.resources.docker-image.url) ) " > imageurl_imagename_lowercase.sh
          
          # we cut the string with last occurance of '/' to get image name and tag as secondHalf of URL
          echo "firstHalfURL=\$(echo \$INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f2- | rev)"  >> imageurl_imagename_lowercase.sh
          echo "secondHalfURL=\$(echo \$INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\"/\" -f1 | rev)" >>  imageurl_imagename_lowercase.sh
          
          #Conditional check if ':' is present in 'secondHalfURL'. 
          #for ex - secondHalfURL=appsodympversion:abcDEF
          echo "if [[ \$secondHalfURL == *\":\"* ]]; then" >> imageurl_imagename_lowercase.sh
          echo "  imagename=\$(cut -d ':' -f 1 <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
          echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
          echo "  tagname=\$(cut -d ':' -f 2- <<< \"\$secondHalfURL\" )" >> imageurl_imagename_lowercase.sh
          echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase:\$tagname" >> imageurl_imagename_lowercase.sh
          #conditional check for ex - secondHalfURL=appsodympversion:abcDEF
          echo "else" >> imageurl_imagename_lowercase.sh
          echo "  imagename=\$secondHalfURL" >> imageurl_imagename_lowercase.sh
          echo "  imagename_lowercase=\$(echo \$imagename |  tr '[:upper:]' '[:lower:]')" >> imageurl_imagename_lowercase.sh
          echo "  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\$firstHalfURL/\$imagename_lowercase" >> imageurl_imagename_lowercase.sh
          echo "fi" >> imageurl_imagename_lowercase.sh 
          echo "echo \"\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" " >>  imageurl_imagename_lowercase.sh
      
          chmod 755 imageurl_imagename_lowercase.sh
      env:
      - name: gitsource
        value: git-source
      volumeMounts:
      - mountPath: /var/lib/containers
        name: varlibcontainers
    - name: mount-image          
      securityContext:
        privileged: true
      image: appsody/appsody-buildah:0.5.0-buildah1.9.0
# Temporarily make copy of mounted image since the mounted image will be unmounted when the container for this task ends.
# TODO: Determine another way to persist the mounted container image across containers
      command: ['/bin/bash']
      args:
        - -c
        - |
          INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
          echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
 
          echo "Pulling image docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
          buildah from --tls-verify=false docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE
          echo $(buildah mount $(buildah containers -q)) > /var/lib/containers/rootfs.txt
          mountDir=$(cat /var/lib/containers/rootfs.txt)
          echo ""
          echo "Mounted image to $mountDir with contents:"
          ls -la $mountDir
          cp -a $mountDir /var/lib/containers
          echo ""
          imageDir=/var/lib/containers/merged
          imageIdFileName=/var/lib/containers/imageid.txt
          echo "Copied mounted image to $imageDir:"
          ls -la $imageDir
          echo $(buildah images -q) > $imageIdFileName
          echo ""
          echo "Image ID of the image to scan: $(cat $imageIdFileName)"
      env:
        - name: gitsource
          value: git-source
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: scan-image
      securityContext:
        privileged: true
      image: kabanero/scanner:1.3.1
      command: ['/bin/bash']
      args:
        - -c
        - |
          imageid=$(cat /var/lib/containers/imageid.txt)
          imageDir=/var/lib/containers/merged

          INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
          echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

          outputDir=/workspace/scans/$(inputs.params.scansDir)/$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE/$imageid
          mkdir -p $outputDir
          optionsAndArgs="$(inputs.params.options-and-arguments) --results $outputDir/results.xml --report $outputDir/report.html $(inputs.params.pathToInputFile)"
          scanCommand="$(inputs.params.command) $imageDir $(inputs.params.module) eval $optionsAndArgs"

          echo "Scanning copy of image docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID $imageid in $imageDir with contents:"
          cd $imageDir
          ls -la
          echo ""
          echo "Scanning image with command:"
          echo $scanCommand
          $scanCommand
          echo ""
          echo "Scanning of copy of image $INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID $imageid in $imageDir complete"
          echo ""

          #Display contents of the results.xml and report.html files
          echo "Displaying contents of $outputDir/results.xml"
          echo "********** START OF results.xml **********"
          cat $outputDir/results.xml
          echo "********** END OF results.xml ************"
          echo ""
          echo "Displaying contents of $outputDir/report.html"
          echo "********** START OF report.html **********"
          cat $outputDir/report.html
          echo "********** END OF report.html ************"
      volumeMounts:
        - name: host-save-dir
          mountPath: /workspace/scans
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    # The host directory to mount where the scansDir will be created and the the scan outputs will be saved to.
    - name: host-save-dir
      hostPath:
        path: /var/lib
    - name: varlibcontainers
      emptyDir: {}
---
#Kabanero! on activate substitute StackId for text 'StackId'
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: StackId-validate-stack-task
spec:
  inputs:
    resources:
    - name: git-source
      type: git
  steps:
  - name: validate-stack-is-active
    securityContext:
      privileged: true
    image: kabanero/validate-stack:0.6.0
    command: ["/bin/bash"]
    args:
      - -c
      - |
        # env var gitsource
        GITSOURCE=$gitsource
        APPSODY_CONFIG=".appsody-config.yaml"
        IMAGE_REGISTRY_HOST=$DEFAULT_STACK_IMAGE_REGISTRY_URL
        IMAGE_REGISTRY_USERNAME=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
        IMAGE_REGISTRY_PASSWORD=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
        
        
        cd /workspace/$GITSOURCE
        if [ ! -f "$APPSODY_CONFIG" ]; then
           echo $APPSODY_CONFIG" is not found in the root of the source directory. Unable to validate if the stack is active."
           exit 1
        fi
        
        # Find the value for "stack:" from the appsody config file and assign it to the variable 'stack'
        declare $( awk '{if ($1 ~ "stack:"){printf "STACK="$2}}'  $APPSODY_CONFIG )
        if [ -z "$STACK" ]; then
           echo "$APPSODY_CONFIG does not contain a stack: definition. Unable to validate if the stack is active."
           exit 1
        fi
        
        # Parse the image value for the repo, project, stackname and version
        # It can be in one of two formats based on appsody CLI used.
        # example 1: appsody/java-microprofile:0.2
        # example 2: image-registry.openshift-image-registry.svc:5000/kabanero/java-microprofile:0.2

        # For version get everything after last `:`
        VERSION="${STACK##*:}"
        echo "In $APPSODY_CONFIG... "
        echo "VERSION = $VERSION"

        # For project stack get everything before the last `:`
        PROJECT_STACK="${STACK%:*}"

        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        STACK_NAME="$(echo $PROJECT_STACK | cut -d'/' -f3 )"

        if [ -z "$STACK_NAME" ]; then
            PROJECT="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            STACK_NAME="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        else
            STACK_REGISTRY="$(echo $PROJECT_STACK | cut -d'/' -f1)"
            PROJECT="$( echo $PROJECT_STACK | cut -d'/' -f2 )"
        fi

        echo "STACK_REGISTRY = $STACK_REGISTRY"
        echo "PROJECT = $PROJECT"
        echo "STACK_NAME = $STACK_NAME"

        # If the host wasn't specified, default to docker.io; if only specified in appsody-cfg.yaml use that
        # If it's in the config map use that and should match with what's in appsody-cfg.yaml
        if [ -z "$IMAGE_REGISTRY_HOST" ]; then
            if [ -z "$STACK_REGISTRY" ]; then
              IMAGE_REGISTRY_HOST="docker.io"
            else
              IMAGE_REGISTRY_HOST=$STACK_REGISTRY
            fi
        else  
            if [ ! -z "$STACK_REGISTRY" ] && [ "$STACK_REGISTRY" != "$IMAGE_REGISTRY_HOST" ]; then
                echo "WARNING - $APPSODY_CONFIG specifies different repository, $STACK_REGISTRY, than what's configured in the config map, $IMAGE_REGISTRY_HOST in the cluster.  They should be in sync.  Config map entry takes priority.  Using $IMAGE_REGISTRY_HOST as the default stack registry."
            fi
        fi

        echo "STACK_IMAGE_REGISTRY_HOST = $IMAGE_REGISTRY_HOST"

        # Check to make sure the stack is active by name first
        kubectl get stack $STACK_NAME -o json > /dev/null 2>&1
        if [ $? -ne 0 ]; then
           echo "$APPSODY_CONFIG specifies stack $STACK_NAME , but no versions of $STACK_NAME are active, and cannot be built."
           echo "Stack messages = $?"
           exit 1
        fi

        # Check if the project names in the cfg file and active stack match
        CLUSTER_STACK_IMAGE=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].images[].image?' ) 
        echo "In the cluster..."
        echo "CLUSTER_STACK_IMAGE is $CLUSTER_STACK_IMAGE"

        # The stack name could be after the 2nd or 3rd `/` based on appsody version. Check after 3rd first
        THIRD_ENTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3 )"

        if [ -z "$THIRD_ENTRY" ]; then
            CLUSTER_PROJECT="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
        else
            CLUSTER_STACK_REGISTRY="$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f1)"
            CLUSTER_PROJECT="$( echo $CLUSTER_STACK_IMAGE | cut -d'/' -f2 )"
        fi

        if [ "$CLUSTER_PROJECT" != "$PROJECT" ]; then
            echo "Project name, $CLUSTER_PROJECT, of active stack in cluster and project name in the stack in $APPSODY_CONFIG, $PROJECT, do not match."
            echo "Validation failed. Stack cannot be built."
            exit 1
        fi

        # TODO add registry validation logic here.  Implictly handled by digest check.
        # But can give a better error message with just a name check

        # Get the 3 digit stack values
        # Assumed the version(s) are in the metadata
        STACK_VERSIONS=$( kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].version?' )    
        
        # Get the target sha256 digest from the image registry. Use the proper credentials depending on what was passed to us
        if [ -z "$IMAGE_REGISTRY_PASSWORD" ] || [ -z "$IMAGE_REGISTRY_USERNAME" ]; then
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        else
           TARGET_DIGEST=$( skopeo inspect --tls-verify=false --creds="$IMAGE_REGISTRY_USERNAME":"$IMAGE_REGISTRY_PASSWORD" docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$VERSION" | jq '.Digest' )
        fi    
        
        if [ -z "$TARGET_DIGEST" ]; then
           echo "$APPSODY_CONFIG specifies a stack version of $VERSION , but the image registry does not contain a version tagged with $VERSION, and cannot be built."
           exit 1
        fi
        
        for STACK_VERSION in ${STACK_VERSIONS}
           do
              if [ -z "$IMAGE_REGISTRY_PASSWORD" ] || [ -z "$IMAGE_REGISTRY_USERNAME" ]; then
                 CURRENT_DIGEST=$( skopeo inspect --tls-verify=false docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$STACK_VERSION" | jq '.Digest' )
              else
                 CURRENT_DIGEST=$( skopeo inspect --tls-verify=false --creds="$IMAGE_REGISTRY_USERNAME":"$IMAGE_REGISTRY_PASSWORD" docker://"$IMAGE_REGISTRY_HOST"/"$PROJECT"/"$STACK_NAME":"$STACK_VERSION" | jq '.Digest' )
              fi    
       
              if [ "$TARGET_DIGEST" =  "$CURRENT_DIGEST" ]; then
                 echo "The Kabanero stack contained in $STACK is active on this system and can be built."
                 exit 0
              else
                 echo "Version: $STACK_VERSION, Digest: $CURRENT_DIGEST, Target Digest: $TARGET_DIGEST"
              fi
           done
        
           echo "The Kabanero stack contained in "$STACK" is not active on this system and contained in the image registry and cannot be built."
           exit 1
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
         name: stack-image-registry-map
         key: default-stack-image-registry-url
         optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: username
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: default-stack-image-registry-secret
          key: password
          optional: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /etc/secret-volume
  volumes:
  - name: varlibcontainers
    emptyDir: {}
  - name: config-volume
    configMap:
      name: stack-image-registry-map
      optional: true
  - name: secret-volume
    secret:
      secretName: default-stack-image-registry-secret
      optional: true
---
